//     First and Last occurrence of same number in Array (Binary Search)  Return==index number.

# include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
int leftOccurrence(int arr[],int size,int key)
{
    int start=0,end=size-1,index=-1;
    int mid=start+(end-start)/2;
    while(start<=end)
    {
    if(key==arr[mid])
    {
        index=mid;
        end=mid-1;
    }
    else if(key>arr[mid])
    {
        start=mid+1;
    }
    else if(key<arr[mid])
    {
        end=mid-1;
    }
    mid=start+(end-start)/2;
    }
    return index;
}

int rightOccurrence(int arr[],int size,int key)
{
    int start=0,end=size-1,index=-1;
    int mid=start+(end-start)/2;
    while(start<=end)
    {
    if(key==arr[mid])
    {
        index=mid;
        start=mid+1;
    }
    else if(key>arr[mid])
    {
        start=mid+1;
    }
    else if(key<arr[mid])
    {
        end=mid-1;
    }
    mid=start+(end-start)/2;
    }
    return index;
}

int main()
{
    int size=7,key=3;
    int arr[size]={1,2,3,3,3,4,5};
    int left=leftOccurrence(arr,size,key);
    int right=rightOccurrence(arr,size,key);
    cout<<"Left Occurrence index of "<<key<<" "<<left<<endl;
    cout<<"Right Occurrence index of "<<key<<" "<<right;
    return 0;
}

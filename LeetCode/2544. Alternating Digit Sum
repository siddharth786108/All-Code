class Solution {
public:
    int alternateDigitSum(int n) {
        int digit,sum=0,temp=0,add=0;
        vector<int> array;
        while(n!=0)
        {
            digit=n%10;
            sum=(sum*10)+digit;   //125
            n=n/10;
        }
        temp=sum;
        while(temp!=0)          
        {
            digit=temp%10;
            array.push_back(digit);         //521
            temp=temp/10;
        }
        for(int i=0;i<array.size();i++)
        {
            if(i%2==0)
            {
                add=add+array[i];    //For +
            }
            else if(i%2!=0)
            {
                add=add-array[i];   // For -
            }
        }  
    return add; 
    }
};

/*  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>@@@@@@@@@@@@@@@@@@@@@@@@@

You are given a positive integer n. Each digit of n has a sign according to the following rules:

The most significant digit is assigned a positive sign.
Each other digit has an opposite sign to its adjacent digits.
Return the sum of all digits with their corresponding sign.

Example 1:

Input: n = 521
Output: 4
Explanation: (+5) + (-2) + (+1) = 4.
Example 2:

Input: n = 111
Output: 1
Explanation: (+1) + (-1) + (+1) = 1.
Example 3:

Input: n = 886996
Output: 0
Explanation: (+8) + (-8) + (+6) + (-9) + (+9) + (-6) = 0.

*/

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        vector<int> even,odd, result;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]%2==0)
            {
                even.push_back(nums[i]);
            }
            else
            {
                odd.push_back(nums[i]);
            }
        }
        for(int i=0;i<nums.size();i++)
        {
            if(i%2==0)
            {
                int a=even[even.size()-1];
                result.push_back(a);
                even.pop_back();
            }
            else
            {
                int b=odd[odd.size()-1];
                result.push_back(b);
                odd.pop_back();
            }
        }
    return result;
    }
};

/*   Second Method

class Solution {
public:
    vector<int> sortArrayByParityII(vector<int>& nums) {
        vector<int> Result(nums.size());
        int Even=0, Odd=1;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]%2==0)
            {
                Result[Even]=nums[i];
                Even=Even+2;
            }
            else if(nums[i]%2!=0)
            {
                Result[Odd]=nums[i];
                Odd=Odd+2;
            }
        }
    return Result;
    }
};

*/


/*    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Given an array of integers nums, half of the integers in nums are odd, and the other half are even.

Sort the array so that whenever nums[i] is odd, i is odd, and whenever nums[i] is even, i is even.

Return any answer array that satisfies this condition.

 

Example 1:

Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.
Example 2:

Input: nums = [2,3]
Output: [2,3]

*/

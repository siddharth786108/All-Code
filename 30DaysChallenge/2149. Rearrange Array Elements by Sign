class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int> Result(nums.size());
        int positive=0,negative=1;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                Result[positive]=nums[i];
                positive=positive+2;
            }
            else if(nums[i]<0)
            {
                Result[negative]=nums[i];
                negative=negative+2;
            }
        }
    return Result;
    }
};
 
/*   Second Method

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int> positive, negative,result;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                positive.push_back(nums[i]);
            }
            else if(nums[i]<0)
            {
                negative.push_back(nums[i]);
            }
        }
        reverse(positive.begin(),positive.end());
        reverse(negative.begin(),negative.end());
        for(int i=0;i<nums.size();i++)
        {
            if(i%2==0)
            {
                result.push_back(positive[positive.size()-1]);
                positive.pop_back();
            }
            else
            {
                result.push_back(negative[negative.size()-1]);
                negative.pop_back();
            }
        }
    return result;
    }
};

*/

/*  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 2nd METHOD @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

class Solution {
public:
    vector<int> rearrangeArray(vector<int>& nums) {
        vector<int> positive, negative,result;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]>0)
            {
                positive.push_back(nums[i]);
            }
            else if(nums[i]<0)
            {
                negative.push_back(nums[i]);
            }
        }
        reverse(positive.begin(),positive.end());
        reverse(negative.begin(),negative.end());
        for(int i=0;i<nums.size();i++)
        {
            if(i%2==0)
            {
                int a=positive[positive.size()-1];
                result.push_back(a);
                positive.pop_back();
            }
            else
            {
                int b=negative[negative.size()-1];
                result.push_back(b);
                negative.pop_back();
            }
        }
    return result;   
    }
};
*/

/*

Example 1:

Input: nums = [3,1,-2,-5,2,-4]
Output: [3,-2,1,-5,2,-4]
Explanation:
The positive integers in nums are [3,1,2]. The negative integers are [-2,-5,-4].
The only possible way to rearrange them such that they satisfy all conditions is [3,-2,1,-5,2,-4].
Other ways such as [1,-2,2,-5,3,-4], [3,1,2,-2,-5,-4], [-2,3,-5,1,-4,2] are incorrect because they do not satisfy one or more conditions.  
Example 2:

Input: nums = [-1,1]
Output: [1,-1]
Explanation:
1 is the only positive integer and -1 the only negative integer in nums.
So nums is rearranged to [1,-1].
 

Constraints:

2 <= nums.length <= 2 * 105
nums.length is even
1 <= |nums[i]| <= 105
nums consists of equal number of positive and negative integers.

*/

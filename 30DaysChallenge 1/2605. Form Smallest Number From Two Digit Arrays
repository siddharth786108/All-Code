/*

Given two arrays of unique digits nums1 and nums2, return the smallest number that contains at least one digit from each array.

Example 1:

Input: nums1 = [4,1,3], nums2 = [5,7]
Output: 15
Explanation: The number 15 contains the digit 1 from nums1 and the digit 5 from nums2. It can be proven that 15 is the smallest number we can have.
Example 2:

Input: nums1 = [3,5,2,6], nums2 = [3,1,7]
Output: 3
Explanation: The number 3 contains the digit 3 which exists in both arrays.

*/

class Solution {
public:
    int minNumber(vector<int>& nums1, vector<int>& nums2) {
    int nums1_small,nums2_small;
    sort(nums1.begin(),nums1.end());
    sort(nums2.begin(),nums2.end());
    for(int i=0;i<nums1.size();i++)
    {
        for(int j=0;j<nums2.size();j++)
        {
            if(nums1[i]==nums2[j])
            {
                return nums2[j];
            }
        }
    }
    reverse(nums1.begin(),nums1.end());
    reverse(nums2.begin(),nums2.end());

    if(nums1[nums1.size()-1]<nums2[nums2.size()-1])
    {
        nums1_small=(nums1[nums1.size()-1]*10)+nums2[nums2.size()-1];
        return nums1_small;
    }
    else if(nums1[nums1.size()-1]>nums2[nums2.size()-1])
    {
        nums2_small=(nums2[nums2.size()-1]*10)+nums1[nums1.size()-1];
    }
    return nums2_small;   
    }
};
